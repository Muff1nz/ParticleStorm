//######################################################################################
//This class was generated by a python script called: ParticleStorm_StatsClass_Generator
//This is done for performance reasons.
//Could write this class manually using dictionaries to make the data more managable.
//But that would impact performance
//######################################################################################



#pragma once
#include <atomic>
#include <string>


class Stats {
public:

	//Total counts for last second
	std::atomic_int physicsUpdateTotalLastSecond = 0;
	std::atomic_int renderUpdateTotalLastSecond = 0;
	std::atomic_int quadTreeSwapTotalLastSecond = 0;
	std::atomic_int quadTreeOverflowTotalLastSecond = 0;
	std::atomic_int quadTreeLeafTotalLastSecond = 0;
	std::atomic_int explosionTotalLastSecond = 0;
	std::atomic_int particlesRenderedTotalLastSecond = 0;


	void CompleteLastSecond() {
		physicsUpdateLastSecondTotalShadow = physicsUpdateTotalLastSecond;
		renderUpdateLastSecondTotalShadow = renderUpdateTotalLastSecond;
		quadTreeSwapLastSecondTotalShadow = quadTreeSwapTotalLastSecond;
		quadTreeOverflowLastSecondTotalShadow = quadTreeOverflowTotalLastSecond;
		quadTreeLeafLastSecondTotalShadow = quadTreeLeafTotalLastSecond;
		explosionLastSecondTotalShadow = explosionTotalLastSecond;
		particlesRenderedLastSecondTotalShadow = particlesRenderedTotalLastSecond;

		physicsUpdateTotalLastSecond = 0;
		renderUpdateTotalLastSecond = 0;
		quadTreeSwapTotalLastSecond = 0;
		quadTreeOverflowTotalLastSecond = 0;
		quadTreeLeafTotalLastSecond = 0;
		explosionTotalLastSecond = 0;
		particlesRenderedTotalLastSecond = 0;

		physicsUpdateTotal += physicsUpdateLastSecondTotalShadow;
		renderUpdateTotal += renderUpdateLastSecondTotalShadow;
		quadTreeSwapTotal += quadTreeSwapLastSecondTotalShadow;
		quadTreeOverflowTotal += quadTreeOverflowLastSecondTotalShadow;
		quadTreeLeafTotal += quadTreeLeafLastSecondTotalShadow;
		explosionTotal += explosionLastSecondTotalShadow;
		particlesRenderedTotal += particlesRenderedLastSecondTotalShadow;

		quadTreeSwapAverageLastSecond = quadTreeSwapLastSecondTotalShadow;
		quadTreeOverflowAverageLastSecond = quadTreeOverflowLastSecondTotalShadow;
		quadTreeLeafAverageLastSecond = quadTreeLeafLastSecondTotalShadow;
		explosionAverageLastSecond = explosionLastSecondTotalShadow;
		particlesRenderedAverageLastSecond = particlesRenderedLastSecondTotalShadow;

		quadTreeSwapAverageLastSecond /= float(physicsUpdateLastSecondTotalShadow);
		quadTreeOverflowAverageLastSecond /= float(physicsUpdateLastSecondTotalShadow);
		quadTreeLeafAverageLastSecond /= float(physicsUpdateLastSecondTotalShadow);
		explosionAverageLastSecond /= float(physicsUpdateLastSecondTotalShadow);
		particlesRenderedAverageLastSecond /= float(renderUpdateLastSecondTotalShadow);
	}


	void CompleteSession() {
		quadTreeSwapAverage = quadTreeSwapTotal;
		quadTreeOverflowAverage = quadTreeOverflowTotal;
		quadTreeLeafAverage = quadTreeLeafTotal;
		explosionAverage = explosionTotal;
		particlesRenderedAverage = particlesRenderedTotal;

		quadTreeSwapAverage /= float(physicsUpdateTotal);
		quadTreeOverflowAverage /= float(physicsUpdateTotal);
		quadTreeLeafAverage /= float(physicsUpdateTotal);
		explosionAverage /= float(physicsUpdateTotal);
		particlesRenderedAverage /= float(renderUpdateTotal);
	}


	std::string LastSecondToStringConsole() const {
		std::string str;
		str += "===============================================================";
		str += "physicsUpdateTotalLastSecond: " + std::to_string(physicsUpdateTotalLastSecond);
		str += "renderUpdateTotalLastSecond: " + std::to_string(renderUpdateTotalLastSecond);
		str += "quadTreeSwapTotalLastSecond: " + std::to_string(quadTreeSwapTotalLastSecond);
		str += "quadTreeOverflowTotalLastSecond: " + std::to_string(quadTreeOverflowTotalLastSecond);
		str += "quadTreeLeafTotalLastSecond: " + std::to_string(quadTreeLeafTotalLastSecond);
		str += "explosionTotalLastSecond: " + std::to_string(explosionTotalLastSecond);
		str += "particlesRenderedTotalLastSecond: " + std::to_string(particlesRenderedTotalLastSecond);
		str += "===============================================================";
		str += "quadTreeSwapAverageLastSecond: " + std::to_string(quadTreeSwapAverageLastSecond);
		str += "quadTreeOverflowAverageLastSecond: " + std::to_string(quadTreeOverflowAverageLastSecond);
		str += "quadTreeLeafAverageLastSecond: " + std::to_string(quadTreeLeafAverageLastSecond);
		str += "explosionAverageLastSecond: " + std::to_string(explosionAverageLastSecond);
		str += "particlesRenderedAverageLastSecond: " + std::to_string(particlesRenderedAverageLastSecond);
		str += "===============================================================";
		return str;
	}


	std::string LastSecondToString() const {
		std::string str;
		str += "physicsUpdateTotalLastSecond: " + std::to_string(physicsUpdateTotalLastSecond);
		str += "renderUpdateTotalLastSecond: " + std::to_string(renderUpdateTotalLastSecond);
		str += "quadTreeSwapTotalLastSecond: " + std::to_string(quadTreeSwapTotalLastSecond);
		str += "quadTreeOverflowTotalLastSecond: " + std::to_string(quadTreeOverflowTotalLastSecond);
		str += "quadTreeLeafTotalLastSecond: " + std::to_string(quadTreeLeafTotalLastSecond);
		str += "explosionTotalLastSecond: " + std::to_string(explosionTotalLastSecond);
		str += "particlesRenderedTotalLastSecond: " + std::to_string(particlesRenderedTotalLastSecond);
		str += "quadTreeSwapAverageLastSecond: " + std::to_string(quadTreeSwapAverageLastSecond);
		str += "quadTreeOverflowAverageLastSecond: " + std::to_string(quadTreeOverflowAverageLastSecond);
		str += "quadTreeLeafAverageLastSecond: " + std::to_string(quadTreeLeafAverageLastSecond);
		str += "explosionAverageLastSecond: " + std::to_string(explosionAverageLastSecond);
		str += "particlesRenderedAverageLastSecond: " + std::to_string(particlesRenderedAverageLastSecond);
		return str;
	}


	std::string CompleteSessionToStringConsole() const {
		std::string str;
		str += "===============================================================";
		str += "physicsUpdateTotal: " + std::to_string(physicsUpdateTotal);
		str += "renderUpdateTotal: " + std::to_string(renderUpdateTotal);
		str += "quadTreeSwapTotal: " + std::to_string(quadTreeSwapTotal);
		str += "quadTreeOverflowTotal: " + std::to_string(quadTreeOverflowTotal);
		str += "quadTreeLeafTotal: " + std::to_string(quadTreeLeafTotal);
		str += "explosionTotal: " + std::to_string(explosionTotal);
		str += "particlesRenderedTotal: " + std::to_string(particlesRenderedTotal);
		str += "===============================================================";
		str += "quadTreeSwapAverage: " + std::to_string(quadTreeSwapAverage);
		str += "quadTreeOverflowAverage: " + std::to_string(quadTreeOverflowAverage);
		str += "quadTreeLeafAverage: " + std::to_string(quadTreeLeafAverage);
		str += "explosionAverage: " + std::to_string(explosionAverage);
		str += "particlesRenderedAverage: " + std::to_string(particlesRenderedAverage);
		str += "===============================================================";
		return str;
	}


	std::string CompleteSessionToString() const {
		std::string str;
		str += "physicsUpdateTotal: " + std::to_string(physicsUpdateTotal);
		str += "renderUpdateTotal: " + std::to_string(renderUpdateTotal);
		str += "quadTreeSwapTotal: " + std::to_string(quadTreeSwapTotal);
		str += "quadTreeOverflowTotal: " + std::to_string(quadTreeOverflowTotal);
		str += "quadTreeLeafTotal: " + std::to_string(quadTreeLeafTotal);
		str += "explosionTotal: " + std::to_string(explosionTotal);
		str += "particlesRenderedTotal: " + std::to_string(particlesRenderedTotal);
		str += "quadTreeSwapAverage: " + std::to_string(quadTreeSwapAverage);
		str += "quadTreeOverflowAverage: " + std::to_string(quadTreeOverflowAverage);
		str += "quadTreeLeafAverage: " + std::to_string(quadTreeLeafAverage);
		str += "explosionAverage: " + std::to_string(explosionAverage);
		str += "particlesRenderedAverage: " + std::to_string(particlesRenderedAverage);
		return str;
	}

private:

	//Total counts for entire session (from start to program closing)
	int physicsUpdateTotal = 0;
	int renderUpdateTotal = 0;
	int quadTreeSwapTotal = 0;
	int quadTreeOverflowTotal = 0;
	int quadTreeLeafTotal = 0;
	int explosionTotal = 0;
	int particlesRenderedTotal = 0;

	//Average per second for entire session (from start to program closing)
	float physicsUpdateAverage = 0;
	float renderUpdateAverage = 0;
	float quadTreeSwapAverage = 0;
	float quadTreeOverflowAverage = 0;
	float quadTreeLeafAverage = 0;
	float explosionAverage = 0;
	float particlesRenderedAverage = 0;

	//Average counts for last second
	int quadTreeSwapAverageLastSecond = 0;
	int quadTreeOverflowAverageLastSecond = 0;
	int quadTreeLeafAverageLastSecond = 0;
	int explosionAverageLastSecond = 0;
	int particlesRenderedAverageLastSecond = 0;

	//Total counts for last second(Shadow)
	int physicsUpdateLastSecondTotalShadow = 0;
	int renderUpdateLastSecondTotalShadow = 0;
	int quadTreeSwapLastSecondTotalShadow = 0;
	int quadTreeOverflowLastSecondTotalShadow = 0;
	int quadTreeLeafLastSecondTotalShadow = 0;
	int explosionLastSecondTotalShadow = 0;
	int particlesRenderedLastSecondTotalShadow = 0;
};
